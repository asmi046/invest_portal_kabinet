<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Services\DigitalSignatureService;

class SugnTest extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'sugn:test';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏');
        $this->newLine();

        // 1. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è
        $stringToSign = $this->ask('–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è');

        if (empty($stringToSign)) {
            $this->error('‚ùå –°—Ç—Ä–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π!');
            return Command::FAILURE;
        }

        $this->info('üìù –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è: ' . $stringToSign);
        $this->newLine();

        // 2. –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Å–µ—Ä–≤–∏—Å–∞
        $this->info('‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ...');

        $signatureService = new DigitalSignatureService();
        $result = $signatureService->signString($stringToSign);

        // 3. –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —ç–∫—Ä–∞–Ω
        $this->newLine();

        if ($result !== null) {
            $this->info('‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
            $this->newLine();
            $this->line('üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è:');
            $this->line('----------------------------------------');
            $this->line($result);
            $this->line('----------------------------------------');
            $this->newLine();
            $this->info('üìä –†–∞–∑–º–µ—Ä –ø–æ–¥–ø–∏—Å–∏: ' . strlen($result) . ' –±–∞–π—Ç');

            return Command::SUCCESS;
        } else {
            $this->error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏!');
            $this->warn('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
            $this->warn('   - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª–µ .env (CRYPTCP_*)');
            $this->warn('   - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å cryptcp.x64.exe');
            $this->warn('   - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–ø–µ—á–∞—Ç–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞');
            $this->warn('   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å PIN-–∫–æ–¥–∞');
            $this->newLine();
            $this->info('üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ —Ñ–∞–π–ª–µ: storage/logs/sign.log');

            return Command::FAILURE;
        }
    }
}
